@page "/freelancers"
@attribute [Authorize(Roles = Common.SD.Role_Admin)]
@using HIN_ventures.DataAccess.Entities
@using System.Net.Http.Json
@using Microsoft.CodeAnalysis.CSharp.Syntax
@inject HttpClient _httpClient
@inject IFreelancerRepository _freelancerRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<div class="mt-2">
    <div class="ml-1 mb-5">
        <MudText Typo="Typo.h4" Align="Align.Left">Freelancers</MudText>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-5" />
    </div>
    <div class="col-12" align="left">
        <MudTable @ref="@_table" Items="@Freelancers" Hover="true" SortLabel="Sort By" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<FreelancerDto, object>(x=>x.LinesOfCodeMonth)">Lines Of Code This Month</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x => x.TotalLinesOfCode)">Total Lines Of Code</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x => x.FreelancerId)">Freelancer Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x => x.Specialty)">Specialty</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x => x.CryptoAddress)">CryptoAddress</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.LinesOfCodeMonth</MudTd>
                <MudTd DataLabel="Position">@context.TotalLinesOfCode</MudTd>
                <MudTd DataLabel="FreelancerId">@context.FreelancerId</MudTd>
                <MudTd DataLabel="Sign">@context.Name</MudTd>
                <MudTd DataLabel="Molar mass">@context.Specialty</MudTd>
                <MudTd DataLabel="Molar mass">@context.CryptoAddress</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudPagination SelectedChanged="PageChanged" ShowFirstButton="enabled" ShowLastButton="enabled"
                               Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
            </PagerContent>
        </MudTable>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-5" />
    </div>
</div>

<div class="mt-2">
    <div class="row col-12">
        <MudGrid Spacing="2" Justify="Justify.Center">
            @if (Freelancers.Any())
            {
                @foreach (var freelancer in Freelancers)
                {
                    <MudItem>
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@freelancer.Name</MudText>
                                    @if (@freelancer.Ratings.Any())
                                    {
                                        <MudRating SelectedValue="@GetAverage(@freelancer.Ratings)" Size="Size.Medium"/>
                                    
                                    }
                                    else
                                    {
                                        <MudRating SelectedValue="0" Size="Size.Medium" />
                                    }
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle2">Specialty: </MudText>
                                <MudText>@freelancer.Specialty</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />
                               
                                <MudText Typo="Typo.subtitle2">Lines of code this month: </MudText>
                                <MudText>@freelancer.LinesOfCodeMonth</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                                <MudText Typo="Typo.subtitle2">Lines of code total: </MudText>
                                <MudText>@freelancer.TotalLinesOfCode</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />
                            </MudCardContent>

                            <MudCardActions>
                                <NavLink class="nav-link" href="@($"freelancer/details/{freelancer.FreelancerId}")">
                                    <span class="oi oi-list-rich" aria-hidden="true"></span> Details
                                </NavLink>
                                <MudButton Link="@($"/freelancer/edit/{freelancer.FreelancerId}")" Variant="Variant.Text" Color="Color.Info">Edit</MudButton>
                                <MudButton OnClick="@(async () => await DeleteFreelancer(freelancer.FreelancerId))" Variant="Variant.Text" Color="Color.Error">Delete</MudButton>
                            </MudCardActions>

                        </MudCard>
                    </MudItem>
                }
            }
            else
            {
                <div>No records found</div>
            }
        </MudGrid>

    </div>
    <MudFab Link="/freelancer/create" Class="fab-button" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" />
</div>

@code {
    private int _selected = 1;
    private bool enabled = true;
    private MudTable<FreelancerDto> _table;
    private int ratingAverage;
    private int ratingAverageCount;
    private int ratingSize;
    private IEnumerable<FreelancerDto> Freelancers { get; set; } = new List<FreelancerDto>();
    private IEnumerable<Rating> Ratings { get; set; } = new List<Rating>();

    protected override async Task OnInitializedAsync()
    {
        Freelancers = await _freelancerRepository.GetAllFreelancers();
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    private int GetAverage(IEnumerable<Rating> Ratings)
    {
        if (Ratings.Any())
        {
            ratingAverageCount = 0;
            ratingSize = 0;
            foreach (var rating in Ratings)
            {
                var rateValue = rating.RatingValue;
                ratingAverageCount += rateValue;
                ratingSize += 1;
            }
            ratingAverage = ratingAverageCount / ratingSize;
            return ratingAverage;
        }
        else
        {
            return 0;
        }
    }

    private async Task DeleteFreelancer(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete the freelancer? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete Freelancer");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogResult = await _dialogService.Show<Delete_Dialog>("Delete", parameters, options).Result;
        if (dialogResult.Data != null)
        {
            var freelancerToDelete = await _freelancerRepository.GetFreelancer(id);
            var result = await _freelancerRepository.DeleteFreelancer(id);
            if (result == 1)
            {
                await _jsRuntime.ToastrSuccess($"{freelancerToDelete.Name} Deleted Successfully.");
            }
            else
            {
                await _jsRuntime.ToastrError($"Failed To Delete {freelancerToDelete.Name}.");
            }
            _navigationManager.NavigateTo("freelancers", forceLoad:true);
        } else
        {
            _navigationManager.NavigateTo("freelancers", forceLoad: true);
        }
    }

    private string GetNoDataString()
    {
        return "No ratings set";
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}
