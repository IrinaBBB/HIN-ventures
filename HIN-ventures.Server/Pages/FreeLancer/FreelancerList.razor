@page "/freelancers"
@attribute [Authorize(Roles = Common.SD.Role_Admin)]
@using HIN_ventures.DataAccess.Entities
@using System.Net.Http.Json
@using Microsoft.CodeAnalysis.CSharp.Syntax
@inject HttpClient _httpClient
@inject IFreelancerRepository _freelancerRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<MudText Typo="Typo.h4" Align="Align.Left">Freelancers</MudText>

<MudTable Items="@Freelancers" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x=>x.FreelancerId)">FreelancerId</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<FreelancerDto, object>(x=>x.LinesOfCodeMonth)">LinesOfCodeMonth</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x=>x.TotalLinesOfCode)">TotalLinesOfCode</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x=>x.CryptoAddress)">CryptoAddress</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<FreelancerDto, object>(x=>x.Specialty)">Specialty</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FreelancerId">@context.FreelancerId</MudTd>
        <MudTd DataLabel="Sign">@context.Name</MudTd>
        <MudTd DataLabel="Name">@context.LinesOfCodeMonth</MudTd>
        <MudTd DataLabel="Position">@context.TotalLinesOfCode</MudTd>
        <MudTd DataLabel="Molar mass">@context.CryptoAddress</MudTd>
        <MudTd DataLabel="Molar mass">@context.Specialty</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

<div class="mt-2">
    <div class="row col-12">
        <MudGrid Spacing="2" Justify="Justify.Center">
            @if (Freelancers.Any())
            {
                @foreach (var freelancer in Freelancers)
                {
                    <MudItem>
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@freelancer.Name</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText>Id: @freelancer.FreelancerId</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                                <MudText Typo="Typo.subtitle2">Specialty: </MudText>
                                <MudText>@freelancer.Specialty</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                                <MudText Typo="Typo.subtitle2">Rating Average: </MudText>
                                <MudText>
                                    @if (@freelancer.Ratings.Any())
                                    {
                                        @GetAverage(@freelancer.Ratings)
                                    }
                                    else
                                    {
                                        @GetNoDataString()
                                    }
                                </MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                                <MudText Typo="Typo.subtitle2">Lines of code this month: </MudText>
                                <MudText>@freelancer.LinesOfCodeMonth</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                                <MudText Typo="Typo.subtitle2">Lines of code total: </MudText>
                                <MudText>@freelancer.TotalLinesOfCode</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-1" />

                                <MudText Typo="Typo.subtitle2">Crypto address: </MudText>
                                <MudText>@freelancer.CryptoAddress</MudText>
                                <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                            </MudCardContent>

                            <MudCardActions>
                                <NavLink class="nav-link" href="@($"freelancer/details/{freelancer.FreelancerId}")">
                                    <span class="oi oi-list-rich" aria-hidden="true"></span> Details
                                </NavLink>
                                <MudButton Link="@($"/freelancer/edit/{freelancer.FreelancerId}")" Variant="Variant.Text" Color="Color.Secondary">Edit</MudButton>
                            </MudCardActions>

                        </MudCard>
                    </MudItem>
                }
            }
            else
            {
                <div>No records found</div>
            }
        </MudGrid>

    </div>
    <MudFab Link="/freelancer/create" Class="fab-button" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" />
</div>

@code {
    private bool enabled = true;
    private int ratingAverage;
    private int ratingAverageCount;
    private int ratingSize;
    private IEnumerable<FreelancerDto> Freelancers { get; set; } = new List<FreelancerDto>();
    private IEnumerable<Rating> Ratings { get; set; } = new List<Rating>();

    protected override async Task OnInitializedAsync()
    {
        Freelancers = await _freelancerRepository.GetAllFreelancers();
    }

    private int GetAverage(IEnumerable<Rating> Ratings)
    {
        if (Ratings.Any())
        {
            ratingAverageCount = 0;
            ratingSize = 0;
            foreach (var rating in Ratings)
            {
                var rateValue = rating.RatingValue;
                ratingAverageCount += rateValue;
                ratingSize += 1;
            }
            ratingAverage = ratingAverageCount / ratingSize;
            return ratingAverage;
        }
        else
        {
            return 0;
        }

    }

    private string GetNoDataString()
    {
        return "No ratings set";
    }

}
