@page  "/freelancer/manage"
@using Models
@using Business.Repositories.IRepositories
@inject IFreelancerRepository FreelancerRepository
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Common.SD.Role_Admin)]


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Freelancer</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="FreelancerModel" OnValidSubmit="HandelFreelancerUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary/>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="FreelancerModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Field of expertise</label>
                        <InputText @bind-Value="FreelancerModel.Speciality" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.Speciality"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Freelancer</button>
                        <NavLink href="freelancer" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private FreelancerDto FreelancerModel { get; set; } = new FreelancerDto();
    private string Title { get; set; } = "Create";

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(Common.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }
    }

    private async Task HandelFreelancerUpsert()
    {
        //var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name);
        //if (roomDetailsByName != null)
        //{
        //    //there is duplicate rooms show error
        //    return;
        //}
        var createdResult = await FreelancerRepository.CreateFreelancer(FreelancerModel);
        NavigationManager.NavigateTo("freelancer");

    }
}
