@page  "/transactions"
@using HIN_ventures.Common;
@using Block.Io.Core
@using System.Linq
@using System.Text
@using Newtonsoft.Json
@using ITransactionRepository = HIN_ventures.Business.Repositories.IRepositories.ITransactionRepository

@inject ITransactionRepository _transactionRepository
@inject HttpClient _http



@attribute [Authorize(Roles = SD.RoleAdmin)]

<h3>Transactions</h3>

<div class="bg-light border p-2">
    HIN-Ventures current funds: @_hinVenturesBalance Dogecoin
    <br />
</div>

@*<button class="btn btn-primary" @onclick="@SomeTask">Send 1 DogeCoin to test account</button>*@
<button class="btn btn-primary" @onclick="@SendOneCoin">Send 1 DogeCoin to test account</button>


@code {

    HttpClient _client = new();
    double _hinVenturesBalance;

    public class TransferByAdress
    {
        public string From { get; set; }
        public string To { get; set; }
        public double Amount { get; set; }
    }

    IBlockIO _blockIo = new BlockIO("9da8-f106-e0c7-e733");

    protected override async Task OnInitializedAsync()
    {

        var balance = await _blockIo.GetBalanceAsync();
        _hinVenturesBalance = balance.Data.AvailableBalance;


        //Postman post: https://block.io/api/v2/prepare_transaction/?api_key=9da8-f106-e0c7-e733&from_labels=HIN-Ventures&to_labels=FreelancerTest&amounts=1

        //fetch balance
        //var accountBalance = await _http.GetFromJsonAsync<AccountDto>("https://block.io/api/v2/get_balance/?api_key=9da8-f106-e0c7-e733&labels=HIN-Ventures");

        //if (accountBalance != null)
        //{
        //    var test = accountBalance.data.available_balance;
        //_hinVenturesBalance = test;
        //}

        ////JsonContent content = JsonContent.Create(_transaction);
        ////var URL = "https://block.io/api/v2/prepare_transaction/";
        ////await _http.PostAsJsonAsync(URL,content);
        ////new() { From = "2N1spDd7mDaBfHbCRKGq9p28BwBo2XjmrEF", To = "2NBuGkA8bdxsH4GhQaURwsz3rmfeX4Mrekt", Amount = 1 }

        await base.OnInitializedAsync();


    }

    readonly TransferDto _transaction = new()
    {
        api_key = SD.ApiKey,
        from_labels = "HIN-Ventures",
        to_labels = "FreelancerTest",
        amounts = "1"
    };

    public class TransferDto
    {
        public string api_key { get; set; }
        public string from_labels { get; set; }
        public string to_labels { get; set; }
        public string amounts { get; set; }
    }

    public async Task SomeTask()
    {
        await CreateTransaction(_transaction);
    }

    public async Task<TransferDto> CreateTransaction(TransferDto details)
    {


        var content = JsonConvert.SerializeObject(details);
        var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");
        var response = await _client.PostAsync("https://block.io/api/v2/prepare_transaction/", bodyContent);
        string res = response.Content.ReadAsStringAsync().Result;
        if (response.IsSuccessStatusCode)
        {
            var contentTemp = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<TransferDto>(contentTemp);
            return result;
        }
        else
        {
            var contentTemp = await response.Content.ReadAsStringAsync();
            var errorModel = JsonConvert.DeserializeObject<ErrorModel>(contentTemp);
            throw new Exception(errorModel.ErrorMessage);
        }
    }

    public class TransferByLabel
    {
        public string FromLabel { get; set; }
        public string ToLabel { get; set; }
        public double Amount { get; set; }
    }

    private async Task SendOneCoin()
    {
        List<TransferByLabel> transfer = new List<TransferByLabel>
    {

            new() { FromLabel = "HIN-Ventures", ToLabel = "FreelancerTest", Amount = 1.0 }
        };

        IEnumerable<Tuple<string, string, double>> enumerableTuples = transfer
            .Select(o => Tuple.Create(o.FromLabel, o.ToLabel, o.Amount));


        await _blockIo.WithdrawFromLabelAsync(enumerableTuples, "H5sbN8Ra34KjgaTFEBcN");
    }



}