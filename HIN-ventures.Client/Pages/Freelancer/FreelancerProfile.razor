@page "/freelancer/profile"
@*@page "/freelancer/profile/{IdentityId:string}" unsupported routing string*@
@using HIN_ventures.Client.Service.IService
@inject ILocalStorageService _localStorage
@inject IJSRuntime JsRuntime
@inject IFreelancerService _freelancerService
@inject IAssignmentService _assignmentService
@inject IBookingDetailsService _bookingDetailsService
@inject NavigationManager NavigationManager
@inject IAssignmentService _iAssignmentService
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = SD.Role_Freelancer)]

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">Freelancer Profile</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@FreelancerModel" OnValidSubmit="HandleProfileUpdate">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Firstname</label>
                        <InputText @bind-Value="FreelancerModel.FirstName" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.FirstName"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Lastname</label>
                        <InputText @bind-Value="FreelancerModel.LastName" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.LastName"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <label>Speciality</label>
                        <InputText @bind-Value="FreelancerModel.Speciality" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.Speciality"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>E-Mail</label>
                        <InputText @bind-Value="FreelancerModel.Email" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.Email"></ValidationMessage>
                    </div>
                    <div class="col">
                        <label>Are you available for assignments?</label>
                        <InputCheckbox @bind-Value="FreelancerModel.IsAvailable"></InputCheckbox>
                    </div>
                    <div class="form-group" style="height:250px;">

                        <button class="btn btn-primary">Update Profile</button>
                        <NavLink href="/" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@*<h3>We will display available Assignments and Assignments belonging to the freelancer</h3>*@
<div class="border p-2 mt-2" style="background-color:slategrey">
    <div class="row container">
        <div class="col-12">
            <h3 class="text-white">Your Current Assignments:</h3>

        </div>

        @foreach (var assignment in AssignmentList)
        {
            if (assignment.FreelancerId == FreelancerId) //display only assignments on logged in freelancer
            {
                <ActiveAssignment OnButtonClicked="TakeFreelancerOffAssignment" AssignmentDto="@assignment"></ActiveAssignment>
            }

        }

        <div class="col-12">
            <p class="text-secondary"> Selected Assignment: @SelectedCounter </p>
        </div>

        <div class="col-12 mt-4">
            <h3 class="text-white">Available Assignments(Click To Select)</h3>

        </div>
        @foreach (var assignment in AssignmentList)
        {
            if (!assignment.IsActive) //display only assignments not taken by other freelancers
            {
                <AvailableAssignment OnAssignmentClickCallback="SetFreelancerOnAssignment" Assignment="@assignment"></AvailableAssignment>
            }

        }
    </div>

</div>

@code {

    [Parameter]
    public FreelancerDto FreelancerModel { get; set; } = new();
    
    [Parameter]
    public int SelectedCounter { get; set; } = 0;
    
    [Parameter]
    public List<AssignmentDto> AssignmentList { get; set; } = new List<AssignmentDto>();

    [Parameter]
    public List<FreelancerDto> FreelancerList { get; set; } = new List<FreelancerDto>();

   

    [Parameter]
    public int FreelancerId { get; set; }

    public UserDto LoggedInUser { get; set; }
    public string IdentityId { get; set; }
  

    //private FreelancerImageDto FreelancerImage { get; set; } = new FreelancerImageDto();
    //private List<string> DeletedImageNames { get; set; } = new List<string>();
    //private bool IsImageUploadProcessStarted { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(5000); //must be commented in if I want to debug
        LoggedInUser = await _localStorage.GetItemAsync<UserDto>(SD.LocalUserDetails);
        IdentityId = LoggedInUser.Id;
        await LoadAssignmentsAndFreelancers();

        //Is already authenticated...so perhaps unneccesary
        //var authenticationState = await AuthenticationState;
        //if (!authenticationState.User.IsInRole(SD.Role_Freelancer))
        //{
        //    var uri = new Uri(NavigationManager.Uri);
        //    NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        //}
        if (IdentityId != null)
        {
            //Fetch freelancer based on IdentityId
            FreelancerModel = (from freelancer in FreelancerList where freelancer.IdentityId.Equals(IdentityId) select freelancer).FirstOrDefault();

            //FreelancerId = 1; //for testing
            FreelancerId = FreelancerModel.FreelancerId;
            //FreelancerModel = await _freelancerService.GetFreelancer(FreelancerId);
            //if (FreelancerModel?.FreelancerImages != null)
            //{
            //    FreelancerModel.ImageUrls = FreelancerModel.FreelancerImages.Select(u => u.FreelancerImageUrl).ToList();
            //}
        }
    }

    protected async Task SetFreelancerOnAssignment(AssignmentDto assignmentDto)
    {

        var toDelete = (from a in AssignmentList where a.Id == assignmentDto.Id select a).First();
        AssignmentList.Remove(toDelete);
        assignmentDto.FreelancerDto = FreelancerModel;
        assignmentDto.FreelancerId = FreelancerId;
        assignmentDto.IsActive = true;
        AssignmentList.Add(assignmentDto);


        SelectedCounter++;
        await InvokeAsync(StateHasChanged); //rerender the ui, so that the activated assigment disappears
    }

    protected async Task TakeFreelancerOffAssignment(AssignmentDto assignmentDto)
    {
        var toDelete = (from a in AssignmentList where a.Id == assignmentDto.Id select a).First();
        AssignmentList.Remove(toDelete);
        assignmentDto.FreelancerId = null;
        assignmentDto.IsActive = false; //bare setter den sånn at den kan overskrives
        AssignmentList.Add(assignmentDto);
        await InvokeAsync(StateHasChanged); //rerender the ui, so that the activated assigment disappears
        SelectedCounter--;
    }


    private async Task LoadAssignmentsAndFreelancers()
    {
        AssignmentList = (await _iAssignmentService.GetAssignments()).ToList();
        FreelancerList = (await _freelancerService.GetFreelancers()).ToList(); //mulig det ikke er nødv. å gå igjennom alle for se hvilke assignments som tilhører denne frilanseren
    }

    private async Task HandleProfileUpdate()
    {

        //FreelancerModel.Speciality = "Blazor!";
        try
        {
            //if (FreelancerId != 0) FreelancerModel = await _freelancerService.GetFreelancer(FreelancerId);

            if (FreelancerModel.FreelancerId != 0)
            {

                //update
                var updateFreelancerResult = await _freelancerService.UpdateFreelancer(FreelancerModel.FreelancerId, FreelancerModel);
                //if ((FreelancerModel.ImageUrls != null && FreelancerModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
                //{
                //    if (DeletedImageNames != null && DeletedImageNames.Any())
                //    {
                //                foreach (var deletedImageName in DeletedImageNames)
                //                {
                //                    var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}FreelancerImages/", "");

                //                    var result = FileUpload.DeleteFile(imageName);
                //                    await FreelancerImagesRepository.DeleteFreelancerImageByImageUrl(deletedImageName);
                //                }
                //            }



                //            await AddFreelancerImage(updateFreelancerResult);
                //        }
                await JsRuntime.ToastrSuccess("Freelancer updated successfully.");
            }

        }
        catch (Exception ex)
        {
            //log exceptions
            var msg = ex.Message;
        }



        //NavigationManager.NavigateTo("/");
    }

    //private async Task HandleImageUpload(InputFileChangeEventArgs e)
    //{
    //    IsImageUploadProcessStarted = true;
    //    try
    //    {
    //        var images = new List<string>();
    //        if (e.GetMultipleFiles().Count > 0)
    //        {
    //            foreach (var file in e.GetMultipleFiles())
    //            {
    //                System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
    //                if (fileInfo.Extension.ToLower() == ".jpg" ||
    //                    fileInfo.Extension.ToLower() == ".png" ||
    //                    fileInfo.Extension.ToLower() == ".jpeg")
    //                {
    //                    var uploadedImagePath = await FileUpload.UploadFile(file);
    //                    images.Add(uploadedImagePath);
    //                }
    //                else
    //                {
    //                    await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
    //                    return;
    //                }
    //            }

    //            if (images.Any())
    //            {
    //                if (FreelancerModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
    //                {
    //                    FreelancerModel.ImageUrls.AddRange(images);
    //                }
    //                else
    //                {
    //                    FreelancerModel.ImageUrls = new List<string>();
    //                    FreelancerModel.ImageUrls.AddRange(images);
    //                }
    //            }
    //            else
    //            {
    //                await JsRuntime.ToastrError("Image uploading failed");
    //                return;
    //            }
    //        }
    //        IsImageUploadProcessStarted = false;
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.ToastrError(ex.Message);
    //    }



    //}

    //private async Task AddFreelancerImage(FreelancerDto freelancerDetails)
    //{
    //    foreach (var imageUrl in FreelancerModel.ImageUrls)
    //    {
    //        if (FreelancerModel.FreelancerImages == null || FreelancerModel.FreelancerImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
    //        {

    //            FreelancerImage = new FreelancerImageDTO()
    //            {
    //                FreelancerId = freelancerDetails.Id,
    //                FreelancerImageUrl = imageUrl
    //            };
    //            await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
    //        }
    //    }
    //}

    //internal async Task DeletePhoto(string imageUrl)
    //{
    //    try
    //    {
    //        var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
    //        var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
    //        if (HotelRoomModel.Id == 0 && Title == "Create")
    //        {
    //            var result = FileUpload.DeleteFile(imageName);
    //        }
    //        else
    //        {
    //            //update
    //            DeletedImageNames ??= new List<string>();
    //            DeletedImageNames.Add(imageUrl);
    //        }
    //        HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.ToastrError(ex.Message);
    //    }

    //}
}
