@page "/freelancer/profile"
@using HIN_ventures.Client.Service.IService
@inject ILocalStorageService _localStorage
@inject IJSRuntime JsRuntime
@inject IFreelancerService _freelancerService
@inject IAssignmentService _assignmentService
@inject IBookingDetailsService _bookingDetailsService
@inject NavigationManager NavigationManager
@inject IAssignmentService _iAssignmentService
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = SD.Role_Freelancer)]

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">Freelancer Profile</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@FreelancerModel" OnValidSubmit="HandleProfileUpdate">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Firstname</label>
                        <InputText @bind-Value="FreelancerModel.FirstName" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.FirstName"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Lastname</label>
                        <InputText @bind-Value="FreelancerModel.LastName" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.LastName"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <label>Speciality</label>
                        <InputText @bind-Value="FreelancerModel.Speciality" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.Speciality"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>E-Mail</label>
                        <InputText @bind-Value="FreelancerModel.Email" class="form-control"></InputText>
                        <ValidationMessage For="()=>FreelancerModel.Email"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <br />
                        <label class="text-warning font-weight-bold pt-4">Are you available for assignments?</label>
                        <InputCheckbox @bind-Value="FreelancerModel.IsAvailable"></InputCheckbox>
                    </div>
                    <br />
                    <div class="form-group" style="height:250px;">

                        <button class="btn btn-primary">Update Profile</button>
                        <NavLink href="/" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@*<h3>We will display available Assignments and Assignments belonging to the freelancer</h3>*@
<div class="border p-2 mt-2" style="background-color:slategrey">
    <div class="row container">
        <div class="col-12">
            <h3 class="text-white">Your Current Assignments:</h3>

        </div>

        @foreach (var assignment in AssignmentList)
        {
            if (assignment.FreelancerId == FreelancerId) //display only assignments on logged in freelancer
            {
                <ActiveAssignment OnButtonClicked="TakeFreelancerOffAssignment" AssignmentDto="@assignment"></ActiveAssignment>
            }

        }

        <div class="col-12">
            <p class="text-secondary"> Selected Assignment: @SelectedCounter </p>
        </div>

        <div class="col-12 mt-4">
            <h3 class="text-white">Available Assignments(Click To Select)</h3>

        </div>
        @foreach (var assignment in AssignmentList)
        {
            if (!assignment.IsActive) //display only assignments not taken by other freelancers
            {
                <AvailableAssignment OnAssignmentClickCallback="SetFreelancerOnAssignment" Assignment="@assignment"></AvailableAssignment>
            }

        }
    </div>

</div>

@code {

    [Parameter]
    public FreelancerDto FreelancerModel { get; set; } = new();

    [Parameter]
    public int SelectedCounter { get; set; } = 0;

    [Parameter]
    public List<AssignmentDto> AssignmentList { get; set; } = new List<AssignmentDto>();

    public List<FreelancerDto> FreelancerList { get; set; } = new List<FreelancerDto>(); //was previously marked [Parameter]

    [Parameter]
    public int FreelancerId { get; set; }

    public UserDto LoggedInUser { get; set; }
    public string IdentityId { get; set; }

    //[CascadingParameter]
    //public Task<AuthenticationState> AuthenticationState { get; set; }


    //private FreelancerImageDto FreelancerImage { get; set; } = new FreelancerImageDto();
    //private List<string> DeletedImageNames { get; set; } = new List<string>();
    //private bool IsImageUploadProcessStarted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        //var authenticationState = await AuthenticationState;
        //if (!authenticationState.User.IsInRole(SD.Role_Customer) || (!authenticationState.User.IsInRole(SD.Role_Freelancer))) //(!authenticationState.User.IsInRole(SD.RoleAdmin) ||
        //{
        //    var uri = new Uri(NavigationManager.Uri);
        //    NavigationManager.NavigateTo("/}");
        //}

        //await Task.Delay(5000); //must be commented in if I want to debug
        LoggedInUser = await _localStorage.GetItemAsync<UserDto>(SD.LocalUserDetails);
        IdentityId = LoggedInUser.Id;
        await LoadAssignmentsAndFreelancers();

        if (IdentityId != null)
        {
            //Fetch freelancer based on IdentityId
            FreelancerModel = (from freelancer in FreelancerList where freelancer.IdentityId.Equals(IdentityId) select freelancer).FirstOrDefault();

            FreelancerId = FreelancerModel.FreelancerId;
            //FreelancerModel = await _freelancerService.GetFreelancer(FreelancerId);
            //if (FreelancerModel?.FreelancerImages != null)
            //{
            //    FreelancerModel.ImageUrls = FreelancerModel.FreelancerImages.Select(u => u.FreelancerImageUrl).ToList();
            //}
        }
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    var test = ADto;
    //    await _assignmentService.UpdateAssignment(ADto.Id, ADto);
    //    await base.OnParametersSetAsync();
    //}

    protected async Task SetFreelancerOnAssignment(AssignmentDto assignmentDto)
    {

        //var toDelete = (from a in AssignmentList where a.Id == assignmentDto.Id select a).First();
        //AssignmentList.Remove(toDelete);
        assignmentDto.FreelancerDto = FreelancerModel; //NB just for demo purposes. Mange assignments er satt til IsActive = 0 likevel om de har frilansere.
        assignmentDto.FreelancerId = FreelancerId;
        assignmentDto.IsActive = true;
        //AssignmentList.Add(assignmentDto);

        await _assignmentService.UpdateAssignment(assignmentDto.Id, assignmentDto);

        SelectedCounter++;
    }

    protected async Task TakeFreelancerOffAssignment(AssignmentDto assignmentDto)
    {
        //var toDelete = (from a in AssignmentList where a.Id == assignmentDto.Id select a).First();
        //AssignmentList.Remove(toDelete);
        assignmentDto.FreelancerDto = null;
        assignmentDto.FreelancerId = null;
        assignmentDto.IsActive = false;

        await _assignmentService.UpdateAssignment(assignmentDto.Id, assignmentDto);
        SelectedCounter--;
    }


    private async Task LoadAssignmentsAndFreelancers()
    {
        AssignmentList = (await _iAssignmentService.GetAssignments()).ToList();
        FreelancerList = (await _freelancerService.GetFreelancers()).ToList(); //mulig det ikke er nødv. å gå igjennom alle for se hvilke assignments som tilhører denne frilanseren
    }

    private async Task HandleProfileUpdate()
    {

        //FreelancerModel.Speciality = "Blazor!";
        try
        {
            //if (FreelancerId != 0) FreelancerModel = await _freelancerService.GetFreelancer(FreelancerId);

            if (FreelancerModel.FreelancerId != 0)
            {

                //update
                var updateFreelancerResult = await _freelancerService.UpdateFreelancer(FreelancerModel.FreelancerId, FreelancerModel);
            }
                await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "The assigment has been created!");
            }

        }
        catch (Exception ex)
        {
            //log exceptions
            var msg = ex.Message;
        }
        //NavigationManager.NavigateTo("/");
    }
}
