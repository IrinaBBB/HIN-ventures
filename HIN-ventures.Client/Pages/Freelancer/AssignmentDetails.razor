@page "/freelancer/assignment/details/{Id:int}"
@using HIN_ventures.Client.Service.IService
@inject IAssignmentService _assignmentService
@inject ICodeFileService _codeFileService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using System.IO
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@inject IJSRuntime _jsRuntime
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject ILogger<AssignmentDetails> Logger
@inject ILocalStorageService _localStorage

@attribute [Authorize(Roles = SD.Role_Freelancer)]

<!--For Testing AuthorizeView with claimsbased authroization-->
@*<AuthorizeView>
        <Authorized>
            <p>Welcome, @context.User.Identity.Name</p>
        </Authorized>
        <NotAuthorized>
            <p>Not signed in</p>
        </NotAuthorized>
    </AuthorizeView>*@

<div class="row container">
    <h1 class="my-4">
        <small>Details of assignment: </small>
    </h1>
    @if (@AssignmentModel != null)
    {
        <div class="card">
            <div class="card-body mb-2">
                <h3 class="my-3">@AssignmentModel.Title</h3>
                <p>@AssignmentModel.Description</p>
            </div>
            @*<MudDivider DividerType="DividerType.Middle" Class="my-2" />*@
            <div class="card-body mt-3">
                <h3 class="my-3">Assignment Details</h3>
                <ul>
                    <li>Who working on:</li>
                    <p>@AssignmentModel.FreelancerId</p>
                    <li>From Customer:</li>
                    <p>@AssignmentModel.CustomerId</p>
                    <li>Category: @AssignmentModel.Category</li>
                    <li>Price: @AssignmentModel.Price</li>
                    <li>Created By: @AssignmentModel.CreatedBy</li>
                    <li>Created Date: @AssignmentModel.CreatedDate</li>
                    <li>From Customer: @AssignmentModel.Deadline</li>
                    <li>Last Updated By: @AssignmentModel.UpdatedBy</li>
                    <li>Last Updated Date: @AssignmentModel.UpdatedDate</li>
                </ul>
            </div>
        </div>
    }
    @*https://docs.microsoft.com/en-us/aspnet/core/blazor/file-uploads?view=aspnetcore-6.0&pivots=webassembly*@
    <div class="card mt-5">
        <h3>Upload your code file here. Only one file can be uploaded</h3>
        <div class="card-body mb-2">
            <p>
                <label>
                    Upload up to @maxAllowedFiles files:
                    <InputFile OnChange="@OnInputFileChange" multiple />
                </label>
            </p>
            @if (files.Count > 0)
            {
                <div class="card">
                    <div class="card-body">
                        <ul>
                            @foreach (var file in files)
                            {
                                <li>
                                    File: @file.Name
                                    <br>
                                    @if (FileUpload(uploadResults, file.Name, Logger,
                                   out var result))
                                    {
                                        <span>
                                            Stored File Name: @result.StoredFileName
                                        </span>
                                    }
                                    else
                                    {
                                        <span>
                                            There was an error uploading the file
                                            (Error: @result.ErrorCode).
                                        </span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>




@code {

    [Parameter]
    public int? Id { get; set; }

    private AssignmentDto AssignmentModel { get; set; } = new AssignmentDto();
    private List<CodeFileDto> CodeFileList { get; set; } = new List<CodeFileDto>();
    private CodeFileDto CodeFileDto { get; set; }

    public UserDto LoggedInUser { get; set; }

    public bool IsProcessing { get; set; } = false;

    private List<File> files = new();
    private List<CodeFileDto> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        LoggedInUser = await _localStorage.GetItemAsync<UserDto>(SD.LocalUserDetails);

        if (Id != null)
        {
            IsProcessing = true;
            AssignmentModel = await _assignmentService.GetAssignment(Id.Value);
            await Task.Delay(2000);
            CodeFileDto = await _codeFileService.GetCodeFileFromAssignment(Id.Value);
            IsProcessing = false;
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1024 * 15; //15 728 640.. 15Mb
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;

                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}",
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
                }
            }
        }
        if (upload)
        {
            var response = await Http.PostAsync("/api/FileSave/", content);

            var newUploadResults = await response.Content.ReadFromJsonAsync<IList<CodeFileDto>>();

            if (newUploadResults is not null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "File uploaded!");
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
            else
            {
                await FailureSwal();
            }
        }

        shouldRender = true;
    }

    private static bool FileUpload(IList<CodeFileDto> uploadResults, string? fileName, ILogger<AssignmentDetails> logger, out CodeFileDto result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;

        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }


    private async Task Success()
    {
        await _jsRuntime.ToastrSuccess("Success");
    }

    private async Task Failure()
    {
        await _jsRuntime.ToastrError("Error");
    }

    private async Task SuccessSwal()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task Completed Successfully!");
    }

    private async Task FailureSwal()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
    }
}
