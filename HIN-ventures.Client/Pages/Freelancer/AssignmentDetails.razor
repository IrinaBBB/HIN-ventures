@page "/freelancer/assignment/details/{Id:int}"
@using HIN_ventures.Client.Service.IService
@inject IAssignmentService _assignmentService
@inject ICodeFileService _codeFileService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using System.IO
@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.Extensions.Logging
@using System.IO
@inject ILogger<CodeFileDto> Logger
@inject IWebHostEnvironment Environment

@attribute [Authorize(Roles = SD.Role_Freelancer)]

<div class="row container">
    <h1 class="my-4">
        <small>Details of assignment: </small>
    </h1>
    @if (@AssignmentModel != null)
    {
        <div class="card">
            <div class="card-body mb-2">
                <h3 class="my-3">@AssignmentModel.Title</h3>
                <p>@AssignmentModel.Description</p>

            </div>
            <MudDivider DividerType="DividerType.Middle" Class="my-2" />
            <div class="card-body">
                <h3 class="my-3">Assignment Details</h3>
                <ul>
                    <li>Who working on:</li>
                    <p>@AssignmentModel.FreelancerId</p>
                    <li>From Customer:</li>
                    <p>@AssignmentModel.CustomerId</p>
                    <li>Category: @AssignmentModel.Category</li>
                    <li>Price: @AssignmentModel.Price</li>
                    <li>Created By: @AssignmentModel.CreatedBy</li>
                    <li>Created Date: @AssignmentModel.CreatedDate</li>
                    <li>From Customer: @AssignmentModel.Deadline</li>
                    <li>Last Updated By: @AssignmentModel.UpdatedBy</li>
                    <li>Last Updated Date: @AssignmentModel.UpdatedDate</li>
                </ul>
            </div>
        </div>
    }
    <div class="card">
        <h3>Upload File with your code. Only one file are can be uploaded</h3>
        <div class="card-body mb-2">
            <p>
                <label>
                    Max allowed files:
                    <input type="number" @bind="maxAllowedFiles" />
                </label>
            </p>
            <p>
                <label>
                    Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
                    <InputFile OnChange="@LoadFiles" />
                </label>
            </p>

            @if (isLoading)
            {
                <p>Uploading...</p>
            }
            else
            {
                <ul>
                    @foreach (var file in loadedFiles)
                    {
                        <li>
                            <ul>
                                <li>Name: @file.Name</li>
                                <li>Last modified: @file.LastModified.ToString()</li>
                                <li>Size (bytes): @file.Size</li>
                                <li>Content type: @file.ContentType</li>
                            </ul>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int? Id { get; set; }

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private AssignmentDto AssignmentModel { get; set; } = new AssignmentDto();
    private List<CodeFileDto> CodeFileList { get; set; } = new List<CodeFileDto>();
    private CodeFileDto CodeFileDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            AssignmentModel = await _assignmentService.GetAssignment(Id.Value); ;
            CodeFileDto = await _codeFileService.GetCodeFileFromAssignment(Id.Value);
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                    Environment.EnvironmentName, "unsafe_uploads",
                    trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger<>.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}

}
