@page "/customer/createassignment/"
@page "/customer/createassignment/{FreelancerId:int}"
@using HIN_ventures.Client.Service.IService
@inject ILocalStorageService _localStorage
@inject IJSRuntime jsRuntime
@inject IFreelancerService _freelancerService
@inject IAssignmentService _assignmentService
@inject ICustomerService _customerService
@inject IBookingDetailsService _bookingDetailsService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = SD.Role_Customer)]
@* Inspirasjonen til koden er hentet fra https://github.com/bhrugen/HiddenVillaBlazor/blob/master/HiddenVilla_Server/Pages/HotelRoom/HotelRoomUpsert.razor *@
@* Inspirasjonen til koden er hentet fra https://github.com/bhrugen/HiddenVillaBlazor/blob/master/HiddenVilla_Client/Pages/HotelRooms/RoomDetails.razor*@

@if (OrderDetails?.Name == "") //make sure the fields are populated before we display the page.
{
    <div class="spinner"></div>
}
else
{
    <div class="row mt-4 mx-4 px-0 px-md-5 mx-md-5">
        <EditForm Model="OrderDetails" class="container" OnValidSubmit="AddAssignment">
            <div class="row p-2 my-3" style="border-radius: 20px;">
                <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size: x-large; margin: 0px;">Describe Your Assignment</p></div></div>
                    <div class="form-group" style="height: 300px; padding-top: 30px;">
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please describe your request">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                        </BlazoredTextEditor>
                    </div>
                </div>

                <div class="col-sm-4 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
                    <div class="row px-2 text-success border-bottom">
                        <div class="col-7 py-1">
                            <p style="font-size: x-large; margin: 0px;">Enter Details</p>
                        </div>
                    </div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <input type="text" value="@OrderDetails.Name" class="form-control">
                        @*<label>Name</label><InputText @bind-value="OrderDetails.Name" type="text" class="form-control" />*@
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <input type="text" value="@OrderDetails.Phone" class="form-control" />
                        @*<InputNumber @bind-value="OrderDetails.Phone" type="text" class="form-control" />*@
                    </div>
                    <div class="form-group">
                        <label class="text-warning">E-mail</label>
                        <input type="text" value="@OrderDetails.Email" class="form-control" />
                        @*<InputText @bind-value="OrderDetails.Email" type="text" class="form-control" />*@

                    </div>

                    <div class="form-group">
                        <label class="text-warning">Title</label>
                        <input type="text" @bind-value="@Title" class="form-control" />
                        @*<InputText @bind-value="OrderDetails.Title" type="text" class="form-control" />*@

                    </div>

                    <div class="form-group">
                        <label class="text-warning">Category</label>
                        <input type="text" @bind-value="@Category" class="form-control" />
                        @*<InputText @bind-value="OrderDetails.Category" type="text" class="form-control" />*@

                    </div>


                    <div class="form-group">
                        <label class="text-warning">Reward</label>
                        <input type="text" @bind-value="@Price" class="form-control" />
                        @*<InputText @bind-value="OrderDetails.Price" type="text" class="form-control" />*@

                    </div>

                    <div class="form-group">
                        <label class="text-warning">DeadLine</label>
                        <input type="text" @bind-value="@DeadLine" class="form-control" />
                        @*<InputText @bind-value="OrderDetails.Deadline" type="text" class="form-control" />*@

                    </div>


                    <div class="form-group">
                        <label class="text-warning">Freelancers</label>
                        <select class="form-control" value="@FreelancerId" @onchange="HandleFreelancerChange">
                            <option value="Select" selected disabled="disabled">(Select freelancer or none)</option>
                            @foreach (var freelancer in FreelancerList)
                            {
                                <option value="@freelancer.FreelancerId">@freelancer.FirstName @freelancer.LastName</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <br />
                        <div><a href="customer/requestfreelancer" class="btn btn-success form-control">View All Freelancers</a></div><br />
                    </div>
                    <div class="form-group">

                        <button type="submit" class="btn btn-success form-control">Create Assignment</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {


    public string FreelancerFirstName { get; set; }
    public string FreelancerLastName { get; set; }
    public UserDto LoggedInUser { get; set; }
    public string IdentityId { get; set; }

    public IEnumerable<FreelancerDto> FreelancerList { get; set; } = new List<FreelancerDto>();
    public IEnumerable<CustomerDto> CustomerList { get; set; } = new List<CustomerDto>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [Parameter]
    public BookingDetailsDto OrderDetails { get; set; } = new BookingDetailsDto();

    [Parameter]
    public int? FreelancerId { get; set; } //chosen from dropdown or from list

    [Parameter]
    public int Price { get; set; } = 1; //How much is it worth?

    [Parameter]
    public string Title { get; set; } = "Standard Tittel"; //Title of assignment?

    [Parameter]
    public string Category { get; set; } = "Standard Kategori"; //What category does the assignment belong to?

    [Parameter]
    public DateTime? DeadLine { get; set; } = null; //What category does the assignment belong to?

    protected override async Task OnInitializedAsync()
    {
        try
        {

            //var freeid = FreelancerId; //test
            await Task.Delay(5000); //For debugging. The debugger wont stop if I don't delay.
            await LoadCustomersAndFreelancers();


            //Create a new order
            OrderDetails = new BookingDetailsDto
            {
                AssignmentDto = new AssignmentDto()
            };

            FreelancerList = await _freelancerService.GetFreelancers(); //used in selectionlist

            if (FreelancerId != null) // A freelancer has been chosen from the list
            {
                OrderDetails.FreelancerDto = await _freelancerService.GetFreelancer(FreelancerId.Value);

                FreelancerFirstName = OrderDetails.FreelancerDto.FirstName;
                FreelancerLastName = OrderDetails.FreelancerDto.LastName;
            }
            else //A freelancer has not been chosen....make an empty object of Freelancer
            {
                OrderDetails.FreelancerDto = new FreelancerDto();
            }

            //Info about logged in user (customer)

            if (await _localStorage.GetItemAsync<UserDto>(SD.LocalUserDetails) != null)
            {
                LoggedInUser = await _localStorage.GetItemAsync<UserDto>(SD.LocalUserDetails);

                OrderDetails.UserId = LoggedInUser.Id;
                OrderDetails.Name = LoggedInUser.FirstName + " " + LoggedInUser.LastName;
                OrderDetails.Email = LoggedInUser.Email;
                OrderDetails.Phone = LoggedInUser.PhoneNo;
                OrderDetails.CustomerDto = (from customer in CustomerList where customer.IdentityId.Equals(LoggedInUser.Id) select customer).FirstOrDefault();

            }
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task LoadCustomersAndFreelancers()
    {
        CustomerList = await _customerService.GetCustomers();
        FreelancerList = await _freelancerService.GetFreelancers(); //mulig det ikke er nødv. å gå igjennom alle for se hvilke assignments som tilhører denne frilanseren
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) //Denne sjekker hele tiden...pinger og pinger...
    {
        if (!firstRender)
            return;

        var loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(OrderDetails.AssignmentDto.Description))
                {
                    await QuillHtml.LoadHTMLContent(OrderDetails.AssignmentDto.Description);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }


    private async Task HandleFreelancerChange(ChangeEventArgs e)
    {
        //var id = FreelancerId; //for testing purposes

        if (e.Value != null)
        {
            OrderDetails.FreelancerDto = await _freelancerService.GetFreelancer(Convert.ToInt32(e.Value.ToString()));
        }


    }


    private async Task AddAssignment()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            OrderDetails.AssignmentDto.Description = await QuillHtml.GetHTML();
            OrderDetails.AssignmentDto.Title = Title;
            OrderDetails.AssignmentDto.Price = Price;
            OrderDetails.AssignmentDto.Category = Category;
            OrderDetails.AssignmentDto.Deadline = DeadLine;

            var orderDetailsSaved = await _bookingDetailsService.SaveBookingDetails(OrderDetails);
            //If I want to save to local storage....
            //await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDetailsSaved);
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task<bool>
    HandleValidation()
    {
        if (string.IsNullOrEmpty(OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}
