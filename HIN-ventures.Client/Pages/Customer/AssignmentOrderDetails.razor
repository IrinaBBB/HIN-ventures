@page "/customer/createassignment/{FreelancerId:int}"
@using HIN_ventures.Client.Model.ViewModel
@using HIN_ventures.Client.Service.IService
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject IFreelancerService freelancerService
@inject IBookingDetailsService bookingDetailsService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = SD.Role_Customer)]
@*if (AssignmentBooking?.OrderDetails?.AssignmentDto ?.HotelRoomImages == null)
{
    <div class="spinner"></div>
}
else
{*@
<div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

    <div class="row p-2 my-3 " style="border-radius:20px; ">
        <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
            <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Create your assignment</p></div></div>
            <div class="form-group">
                <!--p class="card-title text-warning" style="font-size:xx-large">Customer Name</p-->
                <label style="font-size: large"  class="text-warning font-weight-bold pt-5 pl-5" for="description">Description</label><br />
              
            </div>
            <textarea class="form-control" rows="5" id="description"></textarea>
            <div class="row">
                <div class="col-6">
                    <span class="float-right pt-4">
                        
                        <span class="float-right pt-1">Placeholder: Info</span><br />
                        <h4 class="text-warning font-weight-bold pt-5 pl-5">Dogecoin(Doge) price: <span style="border-bottom:1px solid #ff6a00"> XXXX</span></h4>
                        <span class="float-right">Pay pr. line of code</span>
                    </span>
                </div>
            </div>

        </div>

        <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
            <EditForm Model="AssignmentBooking" class="container" OnValidSubmit="HandleCheckout">
            <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="row px-2 text-success border-bottom"><div class="col-7 py-1">
                    <p style="font-size: x-large; margin: 0px;">Enter Details</p>
                </div></div>

                <div class="form-group pt-2">
                    <label class="text-warning">Name</label>
                    @*<InputText @bind-value="AssignmentBooking.OrderDetails.Name" type="text" class="form-control" />*@
                </div>
                <div class="form-group pt-2">
                    <label class="text-warning">Phone</label>
                    @*<InputText @bind-value="AssignmentBooking.OrderDetails.Phone" type="text" class="form-control" />*@
                </div>
                <div class="form-group">
                    <label class="text-warning">Email</label>
                    @*<InputText @bind-value="AssignmentBooking.OrderDetails.Email" type="text" class="form-control" />*@
                </div>
                <div class="form-group">
                    <label class="text-warning">Freelancers</label>
                    <select class="form-control" value="@FreelancerId" @onchange="HandleFreelancerChange">
                        @for (var i = 1; i <= 10; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <br /> <div><a href="customer/requestfreelancer" class="btn btn-success form-control">View Freelancers</a></div><br />
                </div>
                <div class="form-group">

                    <button type="submit" class="btn btn-success form-control">Place Order</button>
                </div></EditForm>
        </div>
    </div>
</div>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    public BookingVM AssignmentBooking { get; set; } = new BookingVM();

    [Parameter]
    public int? FreelancerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(5000);
            AssignmentBooking.OrderDetails = new BookingDetailsDto();
            if (FreelancerId != null)
            {
                if (await localStorage.GetItemAsync<BookingVM>
                (SD.Local_InitialBooking) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<BookingVM>
                        (SD.Local_InitialBooking);

                    AssignmentBooking.OrderDetails.FreelancerDto = await freelancerService.GetFreelancer(FreelancerId.Value);


                }
                else
                {

                }
            }

            if (await localStorage.GetItemAsync<UserDto>
                (SD.Local_UserDetails) != null)
            {
                var userInfo = await localStorage.GetItemAsync<UserDto>
                    (SD.Local_UserDetails);
                AssignmentBooking.OrderDetails.UserId = userInfo.Id;
                AssignmentBooking.OrderDetails.Name = userInfo.Name;
                AssignmentBooking.OrderDetails.Email = userInfo.Email;
                AssignmentBooking.OrderDetails.Phone = userInfo.PhoneNo;
            }
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }


    private async Task HandleFreelancerChange(ChangeEventArgs e)
    {
        if (e.Value != null) FreelancerId = Convert.ToInt32(e.Value.ToString());
        if (FreelancerId != null) AssignmentBooking.OrderDetails.FreelancerDto = await freelancerService.GetFreelancer(FreelancerId.Value);

        //HotelBooking.OrderDetails.CheckOutDate = HotelBooking.OrderDetails.CheckInDate.AddDays(NoOfNights);
        //HotelBooking.OrderDetails.HotelRoomDTO.TotalDays = NoOfNights;
        //HotelBooking.OrderDetails.HotelRoomDTO.TotalAmount = NoOfNights * HotelBooking.OrderDetails.HotelRoomDTO.RegularRate;
    }

    private async Task HandleCheckout()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            AssignmentBooking.OrderDetails.FreelancerId = AssignmentBooking.OrderDetails.FreelancerDto.FreelancerId;
            //AssignmentBooking.OrderDetails = AssignmentBooking.OrderDetails.


            var orderDetailsSaved = await bookingDetailsService.SaveBookingDetails(AssignmentBooking.OrderDetails);

            await localStorage.SetItemAsync(SD.Local_OrderDetails, orderDetailsSaved);


        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }

    }

    private async Task<bool>
    HandleValidation()
    {
        if (string.IsNullOrEmpty(AssignmentBooking.OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(AssignmentBooking.OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(AssignmentBooking.OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}

}
