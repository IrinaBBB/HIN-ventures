@page "/customer/createassignment/{FreelancerId:int}"
@using HIN_ventures.Client.Model.ViewModel
@using HIN_ventures.Client.Service.IService
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject IFreelancerService freelancerService
@inject IBookingDetailsService bookingDetailsService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = SD.Role_Customer)]
@*if (AssignmentBooking?.OrderDetails?.AssignmentDto ?.HotelRoomImages == null)
{
    <div class="spinner"></div>
}
else
{*@
<div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

    <div class="row p-2 my-3" style="border-radius:20px; ">
        <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
            <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Create Your Assignment</p></div></div>
            <div class="form-group" style="height: 300px; padding-top: 30px;">
              
                <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please describe your request">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                        @*<h4>This Toolbar works with HTML</h4>
                        <a href="http://BlazorHelpWebsite.com">
                            BlazorHelpWebsite.com</a>*@
                    </EditorContent>
                </BlazoredTextEditor>
            </div>
            @*<textarea class="form-control" rows="5" id="description"></textarea>*@

            <div class="row">
                <div class="col-6">
                    <h4 class="text-warning font-weight-bold pt-5 pl-5"><span style="border-bottom:1px solid #ff6a00"></span></h4>
                    <span class="float-right pt-4">


                        <span class="float-right"></span>
                    </span>
                </div>
            </div>

        </div>

        <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
            <EditForm Model="AssignmentBooking" class="container" OnValidSubmit="HandleCheckout">
            <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="row px-2 text-success border-bottom"><div class="col-7 py-1">
                    <p style="font-size: x-large; margin: 0px;">Enter Details</p>
                </div></div>

                <div class="form-group pt-2">
                    <label class="text-warning">Name</label>
                    <input type="text" class="form-control"/>
                    @*<InputText @bind-value="AssignmentBooking.OrderDetails.Name" type="text" class="form-control" />*@
                </div>
                <div class="form-group pt-2">
                    <label class="text-warning">Phone</label>
                    <input type="text" class="form-control" />
                    @*<InputText @bind-value="AssignmentBooking.OrderDetails.Phone" type="text" class="form-control" />*@
                </div>
                <div class="form-group">
                    <label class="text-warning">Email</label>
                    <input type="text" class="form-control" />
                    @*<InputText @bind-value="AssignmentBooking.OrderDetails.Email" type="text" class="form-control" />*@
                </div>
                <div class="form-group">
                    <label class="text-warning">Freelancers</label>
                    @*<select class="form-control" value="@FreelancerName" @onchange="HandleFreelancerChange">*@
                <select class="form-control" @bind="@FreelancerName">
                    <option value="Select" selected disabled="disabled">(Select freelancer or none)</option>
                    <option value="none">none</option>
                    @foreach (var freelancer in FreelancerDtos)
                    {
                        <option value="@freelancer.Name">@freelancer.Name</option>
                    }
                </select>
                </div>
                <div class="form-group">
                    <br /> <div><a href="customer/requestfreelancer" class="btn btn-success form-control">View Freelancers</a></div><br />
                </div>
                <div class="form-group">

                    <button type="submit" class="btn btn-success form-control">Send Assignment</button>
                </div></EditForm>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int? FreelancerId { get; set; } //Id is passed when the page is entered

    [Parameter]
    public string FreelancerName { get; set; }


    public BookingVM AssignmentBooking { get; set; } = new BookingVM();
    public IEnumerable<FreelancerDto> FreelancerDtos { get; set; } = new List<FreelancerDto>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();




    protected override async Task OnInitializedAsync()
    {
        try
        {
            //await Task.Delay(5000);
            AssignmentBooking.OrderDetails = new BookingDetailsDto();
            if (FreelancerId != null)
            {
                if (await localStorage.GetItemAsync<BookingVM>
                (SD.Local_InitialBooking) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<BookingVM>
                        (SD.Local_InitialBooking);

                    AssignmentBooking.OrderDetails.FreelancerDto = await freelancerService.GetFreelancer(FreelancerId.Value);
                    FreelancerName = AssignmentBooking.OrderDetails.FreelancerDto.Name;
                    FreelancerDtos = await freelancerService.GetFreelancers();
                    SetHtml();
                }
                else
                {

                }
            }


            //Info about logged in user (customer)

            if (await localStorage.GetItemAsync<UserDto>
                (SD.LocalUserDetails) != null)
            {
                var userInfo = await localStorage.GetItemAsync<UserDto>
                    (SD.LocalUserDetails);
                AssignmentBooking.OrderDetails.UserId = userInfo.Id;
                AssignmentBooking.OrderDetails.Name = userInfo.Name;
                AssignmentBooking.OrderDetails.Email = userInfo.Email;
                AssignmentBooking.OrderDetails.Phone = userInfo.PhoneNo;
            }
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }


    public void SetHtml()
    {
        if (!string.IsNullOrEmpty(AssignmentBooking.OrderDetails.AssignmentDto.Description))
        {
            this.QuillHtml.LoadHTMLContent(AssignmentBooking.OrderDetails.AssignmentDto.Description);
        }
        StateHasChanged();
    }


    private async Task HandleFreelancerChange(ChangeEventArgs e)
    {
        if (FreelancerId != null) AssignmentBooking.OrderDetails.FreelancerDto = await freelancerService.GetFreelancer(FreelancerId.Value);
        FreelancerName = e.Value?.ToString();
    }


    private async Task HandleCheckout()
    {
        //if (!await HandleValidation())
        //{
        //    return;
        //}

        try
        {
            if(FreelancerName == "none") //workaround. It is not possible to have a null value in a list
            {
                FreelancerName = null;
            }
            else
            {
                AssignmentBooking.OrderDetails.FreelancerId = AssignmentBooking.OrderDetails.FreelancerDto.FreelancerId;
            }

            AssignmentBooking.OrderDetails.AssignmentDto.Description = await QuillHtml.GetHTML();


            var orderDetailsSaved = await bookingDetailsService.SaveBookingDetails(AssignmentBooking.OrderDetails);

            await localStorage.SetItemAsync(SD.Local_OrderDetails, orderDetailsSaved);


        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }

    }

    private async Task<bool>
    HandleValidation()
    {
        if (string.IsNullOrEmpty(AssignmentBooking.OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(AssignmentBooking.OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(AssignmentBooking.OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}
