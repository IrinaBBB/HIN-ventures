@page "/customer/requestfreelancer"
@using MudBlazor
@using HIN_ventures.Client.Model.ViewModel
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject IFreelancerService freelancerService

@if (FreelancerDtos != null && FreelancerDtos.Any())
{
    <EditForm Model="FreelancerModel " OnValidSubmit="SaveBookingInfo" class="bg-light">

        <div class="pt-3 pb-2 px-5 mx-1 mx-md-0 bg-secondary">
            <DataAnnotationsValidator />
            <div class="row px-3 mx-3">
                <div class=" col-4 col-md-2">
                    <div class="form-group">
                        <label class="text-warning">Freelancer based on expertise</label>
                        <select class="form-control" @bind="FreelancerModel.Speciality">
                            <option value="Select" selected disabled="disabled">(Select field of expertise)</option>
                            @foreach (var freelancer in FreelancerDtos)
                            {
                                <option value="@freelancer.Speciality">@freelancer.Speciality</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-8 col-md-2">
                    <div class="form-group" style="margin-top: 1.9rem !important;">
                        @if (IsProcessing)
                        {
                            <button class="btn btn-success btn-block form-control"><i class="fa fa-spin fa-spinner"></i>Processing...</button>
                        }
                        else
                        {
                            <input type="submit" value="Request" class="btn btn-success btn-block form-control"/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </EditForm>


    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
        <p>Freelancer with Id @_ratedFreelancerId received a rating of @_newRating</p>

        @foreach (var freelancer in FreelancerDtos)
        {

            <div class="row p-2 my-3 " style="border-radius:20px; border: 1px solid #ffffff">
                <div class="col-12 col-lg-3 col-md-4">
                    <img class="d-block w-100" src=@($"images/coder{freelancer.FreelancerId}.png") alt="First slide">

                </div>
                <div class="col-12 col-lg-9 col-md-8">
                    <div class="row pt-3">
                        <div class="col-12 col-lg-8">
                            <p class="card-title text-warning" style="font-size:xx-large">@freelancer.FirstName @freelancer.LastName </p>
                            <p class="card-text">
                                Speciality: @((MarkupString)freelancer.Speciality)
                            </p>
                            <p class="card-text">
                                Average Rating: @freelancer.AverageRating
                            </p>
                        </div>
                        <div class="col-12 col-lg-4">
                            <div class="row pb-3 pt-2">
                                <div class="col-1 col-lg-11 offset-lg-1">
                                    <a href="@($"customer/createassignment/{freelancer.FreelancerId}")" class="btn btn-success btn-block">Book</a>
                                </div>
                            </div>
                            
                            <div class="row ">
                                @*<MudCard>
                                    <MudCardContent>
                                        <MudRating SelectedValue="@freelancer.AverageRating" Size="Size.Small"/>
                                    </MudCardContent>
                                </MudCard>*@
                                <div class="col-12 pb-1">
                                    <h4 class="text-warning font-weight-bold pt-4">Price <span style="border-bottom: 1px solid #ff6a00">?</span></h4>

                                    <span class="float-right">
                                        @*<span class="float-right">Current rating : @freelancer.AverageRating </span><br />*@
                                        <span class="float-right pt-1">Lines of Code pr. month : @freelancer.LinesOfCodeMonth</span><br/>

                                        <IndividualFreelancer Message="message" OnClickCallback="@UpdateRating" Freelancer="@freelancer"></IndividualFreelancer>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <p>Freelancer with Id @_ratedFreelancerId received a rating of @_newRating</p>
    </div>
}
else
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" alt="img/work-from-home.png"/>
    </div>
}
@code {
    private FreelancerVM FreelancerModel { get; set; } = new();
    public IEnumerable<FreelancerDto> FreelancerDtos { get; set; } = new List<FreelancerDto>();
    private bool IsProcessing { get; set; } = false;
    private int _newRating;
    private int _ratedFreelancerId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (await localStorage.GetItemAsync<FreelancerVM>(SD.FreelancerDetails) != null)
            {
                FreelancerModel = await localStorage.GetItemAsync<FreelancerVM>(SD.FreelancerDetails);
            }

            await LoadFreelancers();
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task LoadFreelancers()
    {
        FreelancerDtos = await freelancerService.GetFreelancers();

        var sumRating = 0;

        var freelancerDtos = FreelancerDtos.ToList();

        foreach (var freelancer in freelancerDtos)
        {
            foreach (var rating in freelancer.RatingsDtos)  //LINQ: sumRating += freelancer.Ratings.Sum(rating => rating.RatingValue);
            {
                sumRating += rating.RatingValue;
            }
            freelancer.AverageRating = sumRating/freelancerDtos.Count();
        }

    }

    private async Task SaveBookingInfo()
    {
        IsProcessing = true;
        await localStorage.SetItemAsync(SD.LocalUserDetails, FreelancerModel);
        await LoadFreelancers();
        IsProcessing = false;
    }

    private void UpdateRating(string message)
    {
        _newRating = int.Parse(message[..^1]);
        _ratedFreelancerId = int.Parse(message[^1..]);
    }
}
