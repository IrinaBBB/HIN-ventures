@page "/customer/requestfreelancer"
@page "/customer/requestfreelancer/{CustomerId:int}"
@using HIN_ventures.Client.Service.IService
@using System.Collections.ObjectModel
@inject IRatingService _ratingsService
@inject ILocalStorageService _localStorage
@inject IJSRuntime _jsRuntime
@inject IFreelancerService _freelancerService

@if (FreelancerDtos != null && FreelancerDtos.Any())
{
    <EditForm Model="FreelancerModel " OnValidSubmit="SaveBookingInfo" class="bg-light">

        <div class="pt-3 pb-2 px-5 mx-1 mx-md-0 bg-secondary">
            <DataAnnotationsValidator />
            <div class="row px-3 mx-3">
                <div class=" col-4 col-md-2">
                    <div class="form-group">
                        <label class="text-warning">Freelancer based on expertise</label>
                        <select class="form-control" @bind="FreelancerModel.Speciality">
                            <option value="Select" selected disabled="disabled">(Select field of expertise)</option>
                            @foreach (var freelancer in FreelancerDtos)
                            {
                                <option value="@freelancer.Speciality">@freelancer.Speciality</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-8 col-md-2">
                    <div class="form-group" style="margin-top: 1.9rem !important;">
                        @if (IsProcessing)
                        {
                            <button class="btn btn-success btn-block form-control"><i class="fa fa-spin fa-spinner"></i>Processing...</button>
                        }
                        else
                        {
                            <input type="submit" value="Request" class="btn btn-success btn-block form-control" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </EditForm>


    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
        <p>Freelancer with Id @_ratedFreelancerId received a rating of @_newRating</p>

        @foreach (var freelancer in FreelancerDtos)
        {

            <div class="row p-2 my-3 " style="border-radius:20px; border: 1px solid #ffffff">
                <div class="col-12 col-lg-3 col-md-4">
                    <img class="d-block w-100" src=@($"images/coder{freelancer.FreelancerId}.png") alt="First slide">

                </div>
                <div class="col-12 col-lg-9 col-md-8">
                    <div class="row pt-3">
                        <div class="col-12 col-lg-8">
                            <p class="card-title text-warning" style="font-size:xx-large">@freelancer.FirstName @freelancer.LastName </p>
                            <p class="card-text">
                                Speciality: @((MarkupString)freelancer.Speciality)
                            </p>
                            <p class="card-text">
                                Average Rating: @freelancer.AverageRating
                            </p>
                            <p class="card-text">
                                Lines of Code last month: @freelancer.LinesOfCodeMonth
                            </p>
                        </div>
                        <div class="col-12 col-lg-4">
                            <div class="row pb-3 pt-2">
                                @*<div class="col-1 col-lg-11 offset-lg-1">*@
                                <a href="@($"customer/createassignment/{freelancer.FreelancerId}")" class="btn btn-success btn-block">Hire This Freelancer</a>
                                @*</div>*@
                            </div>


                            <div class="row ">
                                <div class="col-12 pb-1">
                                    @*<h4 class="text-warning font-weight-bold pt-4">Price <span style="border-bottom: 1px solid #ff6a00">:</span></h4>*@

                                    @*<span class="float-right">*@
                                    @*<span class="float-right">Current rating : @freelancer.AverageRating </span><br />*@


                                    <IndividualFreelancer OnClickCallback="@UpdateRating" Freelancer="@freelancer"></IndividualFreelancer> <!--Message="message"-->
                                    @*</span>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <p>Freelancer with Id @_ratedFreelancerId received a rating of @_newRating</p>
    </div>
}
else
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" alt="img/work-from-home.png" />
    </div>
}
@code {

    [Parameter]
    public int CustomerId { get; set; }

    //[Parameter]
    //public FreelancerDto FreelancerDto { get; set; }

    [Parameter]
    public FreelancerVM FreelancerModel { get; set; } = new FreelancerVM(); //model holdes data in local storage
    public IEnumerable<FreelancerDto> FreelancerDtos { get; set; } = new List<FreelancerDto>();

    private bool IsProcessing { get; set; } = false;
    private int _newRating;
    private int _ratedFreelancerId;
    //ICollection<RatingDto> RatingDtos = new List<RatingDto>(); //denne lista kan fylles med simulerte ratings lengre ned

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        try
        {
            if (await _localStorage.GetItemAsync<FreelancerVM>(SD.FreelancerDetails) != null)
            {
                FreelancerModel = await _localStorage.GetItemAsync<FreelancerVM>(SD.FreelancerDetails);
            }

            await LoadFreelancers();
            //SimulatePreviousRatings();

        }
        catch (Exception e)
        {
            await _jsRuntime.ToastrError(e.Message);
        }
    }

    private void SimulatePreviousRatings()
    {
        for (var i = 0; i < 20; i++)
        {
            var ratingDto = new RatingDto()
            {
                RatingValue = new Random().Next(1, 6), //[1,5]
                FreelancerId = new Random().Next(1, FreelancerDtos.Count() + 1), //[1, ant. freelancere]
                CustomerId = new Random().Next(1, 6) //Hardkodet CustomerId
            };

            //RatingDtos.Add(ratingDto);

            var mod = i % (FreelancerDtos.Count() + 1); //start på nytt forfra så lenge det finnes frelancere
            if (mod == 0) { mod++; } //aldri la mod bli 0}

            var freelancer = (from f in FreelancerDtos where f.FreelancerId == mod select f).First();

            freelancer.RatingDtos.Add(ratingDto);
        }

        foreach (var freelancer in FreelancerDtos)
        {

            var sumRating = 0;

            foreach (var rating in freelancer.RatingDtos) //LINQ: sumRating += freelancer.Ratings.Sum(rating => rating.RatingValue);
            {
                sumRating += rating.RatingValue;
            }

            if (!freelancer.RatingDtos.Count.Equals(0))
            {
                FreelancerModel.FreelancerDto.AverageRating = freelancer.AverageRating = sumRating / freelancer.RatingDtos.Count();
            }


        }
    }


    private async Task LoadFreelancers()
    {

        FreelancerDtos = await _freelancerService.GetFreelancers();

        foreach (var f in FreelancerDtos)
        {
            f.RatingDtos = new List<RatingDto>(); //to avoid nullpointer ex.
        }

    }

    private async Task SaveBookingInfo()
    {
        IsProcessing = true;
        await _localStorage.SetItemAsync(SD.LocalUserDetails, FreelancerModel);
        await LoadFreelancers();
        IsProcessing = false;
    }


    private async Task UpdateRating(RatingDto ratingDto)
    {

        if (ratingDto.RatingValue is > 0 and < 6)
        {
            _newRating = ratingDto.RatingValue;
            _ratedFreelancerId = ratingDto.FreelancerId;
            ratingDto.CustomerId = CustomerId;

            await _ratingsService.SaveRating(ratingDto);

            FreelancerModel.FreelancerDto = await _freelancerService.GetFreelancer(_ratedFreelancerId); //FreelancerDto inside FreelancerModel

            var ratings = await _ratingsService.GetRatings();

            IEnumerable<RatingDto> ratingsOnFreelancer = from rating in ratings where rating.FreelancerId == ratingDto.FreelancerId select rating;

            FreelancerModel.FreelancerDto.AverageRating = GetAverageRating(ratingsOnFreelancer);
            
            await _freelancerService.UpdateFreelancer(_ratedFreelancerId, FreelancerModel.FreelancerDto);
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("Must be within valid range [1,5]");

        }

        await InvokeAsync(StateHasChanged); //to refresh ui with updated ratings
    }

    private static int GetAverageRating(IEnumerable<RatingDto> ratings)
    {
        var sumRating = 0;

        var ratingList = ratings.ToList();
        foreach (var rating in ratingList) //LINQ: sumRating += freelancer.Ratings.Sum(rating => rating.RatingValue);
        {
            sumRating += rating.RatingValue;
        }

        return sumRating / ratingList.Count;
    }

}
