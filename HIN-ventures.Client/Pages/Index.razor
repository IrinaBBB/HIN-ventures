@page "/"
@using HIN_ventures.Client.Service.IService
@inject ILocalStorageService _localStorage
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IAssignmentService _iAssignmentService 
@inject IFreelancerService _iFreelancerService
@using HIN_ventures.Client.Pages.NavButtonComponent

<!--For Testing AuthorizeView with claimsbased authroization-->
@*<AuthorizeView>
    <Authorized>
        <p>Welcome, @context.User.Identity.Name</p>
    </Authorized>
    <NotAuthorized>
        <p>Not signed in</p>
    </NotAuthorized>
</AuthorizeView>*@


<div class="container-fluid">
    <div class="d-flex">

        <!-- Prøvde å lag en felles komponent av disse knappene: NavButton-->
        <div class="row p-0 mx-0 mt-0">
            <div class="col-4 col-md-2 p-0 pr-2">
                <div class="form-group">
                    <label>&nbsp;</label>
                    <input type="submit" value="View Customer page" @onclick="@(async () => await GoToCustomerOrder())" class="btn btn-success btn-block" />
                </div>
            </div>
        </div>

        <div class="row p-0 mx-0 mt-0">
            <div class="col-4 col-md-2 p-0 pr-2">
                <div class="form-group">
                    <label>&nbsp;</label>
                    <input type="submit" value="View Freelancer page" @onclick="@(async () => await GoToFreelancerProfile())" class="btn btn-success btn-block" />
                </div>
            </div>
        </div>

        <!--Chat tutorial: https://www.youtube.com/watch?v=5VSUX6w5P8g&t=13s-->
        <!--GitHub Repo: https://github.com/CuriousDrive/BlazingChat/tree/main/Source%20Code%20By%20Episodes/Episode_24/BlazingChat-->
        <div class="row p-0 mx-0 mt-0">
            <div class="col-4 col-md-2 p-0 pr-2">
                <div class="form-group">
                    <label>&nbsp;</label>
                    <input type="submit" value="Go To Chat" @onclick="@(async () => await GoToChat())" class="btn btn-success btn-block" />
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-9 ">
            <div class="container">
                <div class="row p-3">
                    <h2 class="h4 text-center" style="text-transform: uppercase">Available Assignments</h2>
                    @foreach (var assignment in Assignments)
                    {
                        <div class="card text-white bg-dark mb-3 mr-3 col-md-4" style="max-width: 20rem; margin-right: 10px">
                            <div class="card-header">@assignment.Category</div>
                            <div class="card-body">
                                <h4 class="card-title">@assignment.Title</h4>
                                <p class="card-text">@assignment.Description[..50]</p>
                                <a class="btn btn-outline-success card-link">Learn More...</a>
                            </div>
                        </div>
                    }
                    <a class="btn btn-outline-warning col-12">Get More Assignments...</a>
                </div>
            </div>
        </div>
        <div class="col-md-3 p-3">
            <h2 class="h4 text-center" style="text-transform: uppercase">Freelancers</h2>
            @*@foreach (var freelancer in Freelancers)
            {
                <div class="card text-white bg-light mb-3 mr-3" style="max-width: 20rem;">
                    <div class="card-header">@freelancer.Speciality</div>
                    <div class="card-body p-0">
                        <div class="card-body freelancer-info">
                            <div>
                                <h4 class="card-title">@freelancer.FirstName</h4>
                                <h4 class="card-title">@freelancer.LastName</h4>
                                <div>@freelancer.Email</div>
                            </div>
                            <img class="freelancer-image" src=@($"images/coder{freelancer.FreelancerId}.png")/>
                        </div>
                        <a class="btn btn-success card-link m-3">Learn More...</a>
                    </div>
                </div>
                
            }*@
            <a class="btn btn-outline-warning col-12 mt-3">Get More Freelancers...</a>
        </div>
    </div>
</div>


@code{

    public bool IsProcessing { get; set; } = false;

    public IEnumerable<AssignmentDto> Assignments { get; set; } = new List<AssignmentDto>();
    public IEnumerable<FreelancerDto> Freelancers { get; set; } = new List<FreelancerDto>();

    public UserDto LoggedInUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LoggedInUser = await _localStorage.GetItemAsync<UserDto>(SD.LocalUserDetails);

        await LoadAssignments();

        IsProcessing = true;
        IsProcessing = false;
    }


    private async Task GoToCustomerOrder()
    {
        try
        {
            navigationManager.NavigateTo($"customer/createassignment", true); //no freelancer selected at first
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task LoadAssignments()
    {
        Freelancers = await _iFreelancerService.GetFreelancers();
        Assignments = await _iAssignmentService.GetAssignments();
    }

    private async Task GoToFreelancerProfile()
    {
        var test = LoggedInUser.Id;
        try
        {
            navigationManager.NavigateTo($"freelancer/profile/", true);
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task GoToChat()
    {

        try
        {
            //navigationManager.NavigateTo($"chat/{LoggedInUser.Id}", true);
            //navigationManager.NavigateTo($"chat/{LoggedInUser}", true);
            navigationManager.NavigateTo("chat", true);
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }

    }
}