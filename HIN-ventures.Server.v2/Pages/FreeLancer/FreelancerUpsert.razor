@page "/freelancer/create"
@page "/freelancer/edit/{Id:int}"
@inject IFreelancerRepository _freelancerRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = Common.SD.RoleAdmin)]
@using System.Net.Http
@using HIN_ventures.Business.Repositories.IRepositories
@using HIN_ventures.Models
@using HIN_ventures.Server.Helper
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop


<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">@Title freelancer</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudForm>
            <MudTextField Label="Name"
                          @bind-Value="@FreelancerModel.LastName"
                          HelperText="Name is required!"
                          Required="true"
                          RequiredError="Name is required!" />
            <MudTextField Label="Speciality"
                          @bind-Value="@FreelancerModel.Speciality"
                          HelperText="Your specialty, e.g. FrontEnd, BackEnd, Java, Mobilprogramming etc."
                          Required="true"
                          RequiredError="Speciality is required!" />
            <MudTextField Label="Crypto Address"
                          @bind-Value="@FreelancerModel.CryptoAddress"
                          HelperText="CryptoAddress for you to get payments."
                          Required="true"
                          RequiredError="CryptoAddress is required!">
            </MudTextField>
            <MudCardContent>
                <MudTable Items="@FreelancerModel.AssignmentDtos" Hover="true" Breakpoint="Breakpoint.None" Dense="@true">
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Category</MudTh>
                        <MudTh>CreatedBy</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">
                            <MudForm Model="@context">
                                <MudTextField Label="Title" @bind-Value="context.Title" For="(() => context.Title)" />
                            </MudForm>
                        </MudTd>
                        <MudTd DataLabel="Category">
                            <MudForm Model="@context">
                                <MudTextField Label="Category" @bind-Value="context.Category" For="(() => context.Category)" />
                            </MudForm>
                        </MudTd>
                        <MudTd DataLabel="CreatedBy">
                            <MudForm Model="@context">
                                <MudTextField Label="CreatedBy" @bind-Value="context.CreatedBy" For="(() => context.CreatedBy)" />
                            </MudForm>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Class="ml-auto" Link="freelancers">Back To List</MudButton>
                <MudButton Variant="Variant.Filled" Class="ml-4" Color="Color.Primary" OnClick="@(async () => await HandelFreelancerUpsert())">@Title Freelancer</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private FreelancerDto FreelancerModel { get; set; } = new FreelancerDto();
    private string Title { get; set; } = "Add";

    protected override async Task OnInitializedAsync()
    {
        
        // If Id null update/edit, else create
        if (Id != null)
        {
            Title = "Update";
            FreelancerModel = await _freelancerRepository.GetFreelancer(Id.Value);
        }
        else
        {
            FreelancerModel = new FreelancerDto();
        }
    }

    private async Task HandelFreelancerUpsert()
    {
        if (FreelancerModel.FreelancerId != 0 && Title == "Update")
        {
            var updateAssignmentResult =
                await _freelancerRepository.UpdateFreelancer(FreelancerModel.FreelancerId, FreelancerModel);
            //await _jsRuntime.ToastrSuccess($"{updateAssignmentResult.FreelancerId} Updated Successfully.");
        }
        else
        {
            var createdAssignment =
                await _freelancerRepository.CreateFreelancer(FreelancerModel);
            //await _jsRuntime.ToastrSuccess($"{createdAssignment.FreelancerId} Updated Successfully.");
        }
        _navigationManager.NavigateTo("freelancers");
    }

    private async Task TestSuccess()
    {
        await _jsRuntime.ToastrSuccess("Success");
    }

    private async Task TestFailure()
    {
        await _jsRuntime.ToastrError("Error");
    }

    private async Task TestSuccessSwal()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task Completed Successfully!");
    }

    private async Task TestFailureSwal()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed!");
    }
}