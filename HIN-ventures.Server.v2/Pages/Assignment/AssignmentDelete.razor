@page "/assignment/delete/{Id:int}"
@using Microsoft.AspNetCore.Razor.Language
@using System.Drawing
@using HIN_ventures.Business.Repositories.IRepositories
@using HIN_ventures.Models
@using Color = MudBlazor.Color
@inject IAssignmentRepository _assignmentRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<h1>Delete:</h1>
<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Assignment</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Id:
        </dt>
        <dd class="col-sm-10">
            @AssignmentModel.Id
        </dd>

        <dt class="col-sm-2">
            Title:
        </dt>
        <dd class="col-sm-10">
            @AssignmentModel.Title
        </dd>

        <dt class="col-sm-2">
            Category:
        </dt>
        <dd class="col-sm-10">
            @AssignmentModel.Category
        </dd>

        <dt class="col-sm-2">
            Deadline:
        </dt>
        <dd class="col-sm-10">
            @AssignmentModel.Deadline
        </dd>

        <dt class="col-sm-2">
            Description:
        </dt>
        <dd class="col-sm-10">
            @AssignmentModel.Description
        </dd>

        <dt class="col-sm-2">
            Freelancer Id:
        </dt>
        <dd class="col-sm-10">
            @AssignmentModel.FreelancerId
        </dd>
    </dl>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
               Color="Color.Error" OnClick="@(async () => await DeleteAssignment())">Delete</MudButton>

    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Home"
               Color="Color.Secondary" Link="@($"assignments")">Back to List</MudButton>
</div>


@code {
    [Parameter]
    public int? Id { get; set; }

    private string Title { get; set; } = "Delete";

    private AssignmentDto AssignmentModel { get; set; } = new AssignmentDto();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            AssignmentModel = await _assignmentRepository.GetAssignment(Id.Value);
        }
    }

    private async Task DeleteAssignment()
    {
        if (Id != null)
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
            parameters.Add("ButtonText", "Delete");
            parameters.Add("Color", Color.Error);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            var result = await _assignmentRepository.DeleteAssignment(Id.Value);

            _navigationManager.NavigateTo("assignments");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

}
